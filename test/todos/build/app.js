// Generated by CoffeeScript 1.3.3
(function() {
  var Task, TaskCtrl, TaskVw, app,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Task = (function(_super) {

    __extends(Task, _super);

    function Task() {
      return Task.__super__.constructor.apply(this, arguments);
    }

    Task.configure("Tarea", "name", "done");

    Task.active = function() {
      return this.select(function(item) {
        return !item.done;
      });
    };

    Task.done = function() {
      return this.select(function(item) {
        return !!item.done;
      });
    };

    Task.destroyDone = function() {
      var instance, _i, _len, _ref;
      _ref = this.done();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instance = _ref[_i];
        instance.destroy();
      }
      return console.error(Task.all());
    };

    Task.prototype.validate = function() {
      if (!this.name) {
        return "name is required";
      }
    };

    return Task;

  })(Monocle.Model);

  TaskVw = (function(_super) {

    __extends(TaskVw, _super);

    function TaskVw() {
      return TaskVw.__super__.constructor.apply(this, arguments);
    }

    TaskVw.prototype.container = ".items";

    TaskVw.prototype.template = "<div class=\"item {{#done}}done{{/done}}\">\n    <div class=\"view\" title=\"Double click to edit...\">\n        <input type=\"checkbox\" {{#done}}checked=\"checked\"{{/done}}>\n        <span>{{name}}</span> <a class=\"destroy\"></a>\n    </div>\n    <div class=\"edit\">\n        <input type=\"text\" value=\"{{name}}\">\n    </div>\n</div>";

    TaskVw.prototype.events = {
      "dblclick       .view": "onEdit",
      "click          .destroy": "onDestroy",
      "click          input[type=checkbox]": "onCheck",
      "blur           input[type=text]": "onBlur"
    };

    TaskVw.prototype.elements = {
      "input[type=checkbox]": "checkbox"
    };

    TaskVw.prototype.onEdit = function(data) {
      this.el.addClass("editing");
      return this.input.focus();
    };

    TaskVw.prototype.onBlur = function(event) {
      event.preventDefault();
      this.el.removeClass("editing");
      this.item.updateAttributes({
        name: this.input.val()
      });
      return this.refresh();
    };

    TaskVw.prototype.onCheck = function(event) {
      var done;
      event.preventDefault();
      console.error("onCheck: ", arguments, this.el, $('input[type=checkbox]').attr('checked'));
      done = this.checkbox.attr('checked');
      console.error("onCheck -> ", done);
      this.item.updateAttributes({
        done: done
      });
      return this.refresh();
    };

    TaskVw.prototype.onDestroy = function() {
      return this.remove();
    };

    return TaskVw;

  })(Monocle.View);

  TaskCtrl = (function(_super) {

    __extends(TaskCtrl, _super);

    TaskCtrl.prototype.events = {
      "click  form a": "onCreate",
      "click .clear": "onClear"
    };

    TaskCtrl.prototype.elements = {
      "form input": "input",
      ".countVal": "count"
    };

    function TaskCtrl() {
      this.bindChange = __bind(this.bindChange, this);

      this.bindCreate = __bind(this.bindCreate, this);

      this.bindDestroy = __bind(this.bindDestroy, this);

      this.bindError = __bind(this.bindError, this);
      TaskCtrl.__super__.constructor.apply(this, arguments);
      Task.bind("create", this.bindCreate);
      Task.bind("change", this.bindChange);
      Task.bind("destroy", this.bindDestroy);
      Task.bind("error", this.bindError);
    }

    TaskCtrl.prototype.bindError = function(task) {
      return console.error(arguments);
    };

    TaskCtrl.prototype.bindDestroy = function(task) {
      console.error("controller task destroy", task, arguments);
      return alert(task.name);
    };

    TaskCtrl.prototype.bindCreate = function(task) {
      var view;
      view = new TaskVw({
        item: task
      });
      return view.append(task);
    };

    TaskCtrl.prototype.bindChange = function() {
      var active;
      active = Task.active().length;
      return this.count.text(active);
    };

    TaskCtrl.prototype.onCreate = function(event) {
      event.preventDefault();
      Task.create({
        name: this.input.val()
      });
      this.input.val("");
      return console.error("tasks >> ", Task.all());
    };

    TaskCtrl.prototype.onClear = function(event) {
      event.preventDefault();
      return Task.destroyDone();
    };

    return TaskCtrl;

  })(Monocle.Controller);

  app = new TaskCtrl({
    el: $$("#tasks")
  });

  Task.create({
    name: "Cafe con Ina en el Laia"
  });

  console.error("==================================================================");

}).call(this);
